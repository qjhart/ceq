* CEQ (/kek/) California Environmental Quadtree

CEQ is a naming scheme for a common set of regular coverages for California.
These coverages are quadtree decompositions of the state, using the California
Albers grid [[https://spatialreference.org/ref/epsg/3310/][EPSG:3310]], the most standard grid for mapping Statewide natural
resources.  The unit measure for the quadtree is the kilometer, but grid
designations can to be at finer scales, (but always at a binary division of a
km; eg. (1/2)=500m, (1/4)=250m, (1/8)=125m).

CEQ is similar in some ways to the [[http://gis.co.dakota.mn.us/content/dakco/usng/mapdocuments/USNG%2520Standard%2520Maps.pdf][US National Grid]], but more simple
since it only covers California, and divides the state into squares that often
have a direct one-to-one correspondance with raster imagery.

You might consider using a CEQ quadtree if you are considering reprojecting data
for California, and you have no strong reasons for using a different resolution
or origin. CEQ data plays nicely with other CEQ datasets in the sense that
joining data from other resolutions is a more natural process.

In CEQ every pixel has an identifier and this is often useful. This is
especially true if you are doing a project like a long term time series where
people are interested in data from a single pixel. The identifiers are easily
calculatable as well.

** Coverage

CEQ can be used to identify areas within a 2048x2048(km) square centered at the
origin of the EPSG:3310 projection. This area is shown in [[file:f.topojson][f.topojson]]. This area
covers significant portion greater than California, and should be usable for
projects with areas that extend beyond the actual CA borders.  The size of the
region depends on the coverage used.

** CEQ identifers

 Every pixel within these coverages has a unique identifier. The identifiers are
 unique both within the coverage and throughout all coverages. No identifer is
 used to specify a different region in a different coverage.  As the pixels
 become smaller and more resolved, the identifiers grow in length.

 CEQs are identified with an optional scheme identifier; followed by a required
 *Prefix Code*; potentially followed by an optional *grid address*. The *Prefix
 Code* is a single hexidecimal character, and the *grid address* is a string of
 hexidecimal characters optionally followed with a period ~.~ followed by a
 string of base4 numbers.

 Scheme identifiers can be a local designation, an http address, or the official
 ark for the CEQ grids.  Typically, the scheme identifier ~ceq:~ is used as a
 local designation. Some example CEQ identifiers are: ~ceq:7~, ~ceq:F~,
 ~ceq:0ABC~, and ~ceq:1ABC.3~.  Similar identifiers with specifed schemes
 include: ~ark:/XXXX/Fc/1ABC.3~ and ~https://lab.digital.ucdavis.edu/ceq/1ABC.3~.
 The ~ark:~ identifier for CEQs is ~ark://quinn/isgreat~.  There is
 no preferred URL specification for CEQ identifiers.

** Prefix Codes

The very first Hex term is used to designate the general location of the grid.
This can either be the quadrant of the pixel location (w/ the EPSG:3310 origin
as the origin of the quadrant), or a small number of additional codes specifing
some special cases for the identifier.  These are shown in the table below:

| Prefix | Description       |
|--------+-------------------|
| ceq:0  | NE Quadrant       |
| ceq:1  | SE Quadrant       |
| ceq:2  | NW Quadrant       |
| ceq:3  | SW Quadrant       |
| ceq:7  | All Quadrants     |
| ceq:E  | Error             |
| ceq:F  | Out of California |

Graphically, the prefix codes identify the following regions, where ceq:7 is the
total are of ceq:[0123].

| F | F | F | F |
| F | 2 | 0 | F |
| F | 3 | 1 | F |
| F | F | F | F |

Each prefix code quadrant has a size of 1024km x 1024 km (2^10 km). One good way
to think of the prefix codes, 0-3, is that they specify the sign of the
coordinate values; where 0 is positive, and 1 is negative, and the order of the
two bits is [x-sign][y-sign]. This is helpful in that these prefix coordinate
signs are used in the in the calculations to and from identifiers and coordinate
values.

| Y \ X | - | + |
|-------+---+---|
| +     | 2 | 0 |
| -     | 3 | 1 |

* CEQ Decompostions
Starting from the prefix code, the next finer resolution grid is formed by
dividing the region into 4 quads, bisecting both the x and y dimensions. The
identifier for these quads is 2-bit code. Adding this 2-bit code to the prefix
code is the identifer for these new regions.

This process can be preformed recursively, with each successive 2-bit code added
to the previous identifier. Two sets of identifiers form a nibble (4-bits), and
these nibbles are identified by their hex code (0-F). 2-bit identifiers are
specified in base 4, (digits 0-3). In oder to differentiate between the hex and
base4 codes, we use a period (.). base4 codes can only occur at the end of the
identifer, after the (.).

Grid locations can be specified by either the hexidecimal or base4 codes, or by
a combination of both.  The complete naming is defined as:

ceq:[P][h]*.[f]* where [P] is the prefix code; [h] are the hexidecimal digits;
and [f] are the base4 digits.  The period '.' in the specification identifies
when the code switches from hexidecimal to base4.  The prefered notation is to
use as many hexidecimal codes as possible. For example; ceq:0A.1 is prefered
over ceq:0.221, although both forms *should* be accepted by applications using
ceq identifiers.  Identifers are case insensitve for the hex values.

The regular expression match for any valid ceq is:

~/^(.*[:/])?(([7EF])|([0123])([0-9,A-F]*)(\.([0-3]*))?)$/i;~

where:
~\1~ is the scheme
~\2~ is the ceq identifier
~\3~ is the non-quadrant prefix code
~\4~ is the quadrant prefix code
~\5~ are the hex characters
~\6~ is the base4 suffix
~\7~ are the base4 characters

** NE Quad Decomposition Naming conventions
When decomposing a region into the next smaller region, the following quad
naming scheme is used for the upper quadrant ceq:0

| - | W | E |
|---+---+---|
| N | 2 | 3 |
| S | 0 | 1 |

When you decompse a region mulitple times, you just continue the same naming
pattern.  The table below the names of a region decomposed twice.

| -  | WW | WE | EW | EE |
|----+----+----+----+----|
| NN | 22 | 23 | 32 | 33 |
| NS | 20 | 21 | 30 | 31 |
| SN | 02 | 03 | 12 | 13 |
| SS | 00 | 01 | 10 | 11 |

Each quadtree composition needs for bits to specify location, so the above table
are also valid numbers in base4.  These can all be named with a single base16,
nibble, or hexidecimal digit.  The following table shows the same designation with
hexidecimal numbering.

| -  | WW | WE | EW | EE |
|----+----+----+----+----|
| NN |  A |  B | E  | F  |
| NS |  8 |  9 | C  | D  |
| SN |  2 |  3 | 6  | 7  |
| SS |  0 |  1 | 4  | 5  |


** Other Quad Prefix Naming conventions
The other quads; ceq:1, ceq:2, and ceq:3, follow a similer nameing convention,
however, the ordering pattern is reflected accross the X and Y axises based on
the where the regions lie w.r.t. the origin.

So the naming convention for ceq:1 is:

| - | W | E |
|---+---+---|
| N | 0 | 1 |
| S | 2 | 3 |

ceq:2 is:

| - | W | E |
|---+---+---|
| N | 3 | 2 |
| S | 1 | 0 |

and ceq:3 is:

| - | W | E |
|---+---+---|
| N | 1 | 0 |
| S | 3 | 2 |

The reason for reflecting the ordering over the axis, are so that the method of
calculating a geographic region from a given ceq: identifier remains the same
for all quads.  absolute X and Y distances are calculated from grid identifier,
and the prefix code is used to decide in what direction the distances are
applied from the origin.  In addtion, the quads go together somewhat more
sensically, in this case.  The following table shows the first few regions for
all of California, the origin being at the center,

| 23 | 22 | 02 | 03 |
| 21 | 20 | 00 | 01 |
| 31 | 30 | 10 | 11 |
| 33 | 32 | 12 | 13 |


| 2F | 2E | 2B | 2A | 0A | 0B | 0E | 0F |
| 2D | 2C | 29 | 28 | 08 | 09 | 0C | 0D |
| 27 | 26 | 23 | 22 | 02 | 03 | 06 | 07 |
| 25 | 24 | 21 | 20 | 00 | 01 | 04 | 05 |
| 35 | 34 | 31 | 30 | 10 | 11 | 14 | 15 |
| 37 | 36 | 33 | 32 | 12 | 13 | 16 | 17 |
| 3D | 3C | 39 | 38 | 18 | 19 | 1C | 1D |
| 3F | 3E | 3B | 3A | 1A | 1B | 1E | 1F |


** Decoding

** Creating TOPOJSON

You can create a topojson file

``` bash
ceq --topojson --to=output_file.json
```

** Creating GEOJSON

You can create a geojson file

``` bash
ceq --geojson --from=input_file [--to=output_file.json] [--include=CEQ]
```

** Linked datat

ceq:F

* Non-Normative Information

** Adjacency
Often, given a particular pixel you are interested in finding the identifiers
adjacent to that given pixel.  This


** Topojson

Topojson is a great method of representing CEQ grids, because it encourages the
coverage aspects of the quadtrees.

One disadvantage of topojson, (or geojson) is the lack of projection
specification.  This is especially bothersome for two reasons, first for small
scale grids, (big pixels).  Two point arc specifications do not accurately show
the line as it would appear in the EPSG:3310 projection.  Secondly, we cannot
take advantage of the scale and transform functionality of topojson, though it
would effectively compress these quadtrees.  It's because of this lack of
projection specification, that we can't have a single "offical" CEQ topojson
file.

Topojson files do allow the specification of a transform parameter.  Transforms
would be very useful in specifying ~ceq~ quadtrees, since they are so regular.
That topojson does not support a coordinate system limits the usability of this
function.

For the arc issue, if you want more accurate lines for your quadtree, then
please used points corresponding to intersections of finer CEQ grids as those
intermediate points.

In topoJSON files, you need to specify the arcs that are used create the
polygons associated with each pixel.  These are always combinations of four
arcs, corresponding to the west, north, east, and south.  Arcs always need to be
specified by their order number.  When we create topojson files, we define an
ordering that is associated with the ordering of the pixel identifiers of the
quadtree.  This allows us to easily create the list of required arcs for every
pixel in the quadtree.  This methodology only works efficiently for a single
complete quadtree, otherwise arc ordering is

When we create topojson files, we have a standard methodology for ordering the
arcs.

* SQL Implementation
#+PROPERTY: header-args:sql :engine postgresql :cmdline "service=zones" :tangle yes

DO $$ plv8.elog(NOTICE, "hello there!"); $$ LANGUAGE plv8;

#+BEGIN_SRC sql
DO $$ return "hello"; $$ LANGUAGE plv8;
#+END_SRC

#+RESULTS:
| DO |
|----|

#+BEGIN_SRC sql
CREATE FUNCTION plv8_test(keys TEXT[], vals TEXT[]) RETURNS JSON AS $$
    var o = {};
    for(var i=0; i<keys.length; i++){
        o[keys[i]] = vals[i];
    }
    return o;
$$ LANGUAGE plv8 IMMUTABLE STRICT;
#+END_SRC

#+RESULTS:
| CREATE FUNCTION |
|-----------------|

#+BEGIN_SRC sql
SELECT plv8_test(ARRAY['name', 'age'], ARRAY['Tom', '29']);
#+END_SRC

#+RESULTS:
| plv8_test                 |
|---------------------------|
| {"name":"Tom","age":"29"} |

#+BEGIN_SRC sql
CREATE or replace function init_injector(prefix text,js text)
RETURNS TEXT
LANGUAGE PLPGSQL AS $PL$
begin
EXECUTE FORMAT($FORMAT$
CREATE OR REPLACE FUNCTION require_%1$s() RETURNS VOID AS $INIT_FUNCTION$
%2$s
$INIT_FUNCTION$ LANGUAGE plv8 IMMUTABLE STRICT;
$FORMAT$,prefix,js);
return 'require_'||prefix;
end
$PL$;

#+END_SRC

#+RESULTS:
| CREATE FUNCTION |
|-----------------|
